import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.ArrayList;
import java.util.Iterator;
import java.lang.Math;
import java.util.Random;

/**
 * The responder class represents a response generator object.
 * It is used to generate an automatic response, based on specified input.
 * Input is presented to the responder as a set of words, and based on those
 * words the responder will either generate a String response or start playing
 * a music track as requested by the user.
 *
 * Internally, the reponder uses a HashMap to associate words with response
 * strings and a list of default responses. If any of the input words is found
 * in the HashMap, the corresponding response is returned. If none of the input
 * words is recognized, one of the default responses is randomly chosen.
 * 
 * @author     Eric Stuppard
 * @version    1.0 (2015.07.09)
 */
public class Responder
{
    
    /** The Central Responder */
    // Used to map key words to responses.
    private HashMap<String, String> responseMap;
    
    // Default responses to use if we don't recognise a word.
    private ArrayList<String> defaultResponses;
        
    private Random randomGenerator;
    
    //Stores the user's name
    private String name;
    
    /** The Music Player: */
    // An ArrayList for storing music tracks.
    private ArrayList<Track> tracks;
    // A player for the music tracks.
    private MusicPlayer player;
    // A reader that can read music files and load them as tracks.
    private TrackReader reader;

    /**
     * Construct a Responder
     */
    public Responder()
    {
        //Responses
        responseMap = new HashMap<String, String>();
        defaultResponses = new ArrayList<String>();
        fillResponseMap();
        fillDefaultResponses();
        randomGenerator = new Random();
        
        //Music
        tracks = new ArrayList<Track>();
        player = new MusicPlayer();
        reader = new TrackReader();
        readLibrary("JabberVibes");
    }
    
    /**
     * Asks for the user's name
     * 
     * @param A single word (the user's name)
     * @return The user's name stored in the "name" field
     */
    
    public String setName(String person)
    {
        name = person;
        return name;
    }
    
    
    /**
     * Randomly adds the user's name at the beginning or end of a typical response
     * 
     * @param A response generated by Responder
     * @return The user's name added to the beginning of the response
     */
    public String addName(String response)
    {
        double randomVal = Math.random();
        
        //Adds user's name 30% of time
        if (randomVal>=0 && randomVal<=0.33) {
            return "I gotta say " + name + ", " + response;
        } else {
            return response;
        }
    }
    
    
    
    /**
     * Prompts the user to choose which music topic to discuss with Jabber
     * 
     * @return A choice between 0 and 1 for the user to enter
     */
    public String chooseModePrompt()
    {
        return "Do you enjoy the poetic, insightful prose of hip-hop music?\n" + 
        "Or do you identify more with the soulful, melodic sound of R&B?\n" +
        "Press 0 for hip-hop, or 1 for R&B.";
    }
    
    
    /**
     * Returns one of two replies based on what the user entered for
     * the previous prompt
     * 
     * @param A number (0 or 1) entered by the user into the terminal
     * @return One of the two following responses (String)
     */
    public String chooseMode(String reply)
    {
        if (reply.equals("0")) {
            return "Good hip-hop is unappreciated these days.\n" +
            "Which region do you identify most with?\n" + 
            "West coast, east coast, or the midwest?";
        } else if (reply.equals("1")) {
            return "It's always hard to resist smooth vocals.\n" +
            "Do you prefer male or female vocalists?";
        }
        return null;
    }
    
    
    /**
     * Stores prompt words for the Responder to start playing a certain track
     * 
     * @return The key words telling the responder to play a track
     */
    public String playPrompt()
    {
        return "play some ";
    }
    

    /**
     * Generate a response from a given set of input words.
     * 
     * @param A set of words entered by the user
     * @return A string that should be displayed as the response
     */
    public String generateResponse(String words)
    {

        //Runs the response to one of two potential response banks
        String[] wordBits = words.split("[ \t\n\r\f.?!()]");
        ArrayList<String> keyWords = new ArrayList<String>();

        //Adds potential responses to a list
        for (String word : wordBits) {
            if (responseMap.containsKey(word)) {
                keyWords.add(responseMap.get(word));
            }
        }

        //Randomly chooses a response from the list
        if (keyWords.size()!=0) {
            int index = randomGenerator.nextInt(keyWords.size());
            String myResponse = keyWords.get(index);
            
            //Adds user's name to response 33% of the time
            double randomVal = Math.random();
            if (randomVal>=0 && randomVal <= 0.33) {
                return addName(myResponse);
            }
            return myResponse;
        } 
        
        //If the user's text wasn't recognized
        return pickDefaultResponse();
    }
    
    
    /**
     * Plays a track by a specific artist as requested by the user
     * User must enter "play some " followed by the artist's name.
     * 
     * @param Words entered into the terminal by the user
     * @return Plays a track by the specified artist
     */
    public Track generateTrack(String words)
    {
        
        String[] wordBits = words.split("[ \t\n\r\f.?!()]");
        ArrayList<Track> theseTracks = new ArrayList<Track>();
        
        for (String word : wordBits) {
                    
            if (responseMap.get(word)!=null) {
                
                /**
                 * Searches for an artist's name in the user's response 
                 * so that the appropriate song can be played
                 */
                for (Track track : tracks) {
                    if (track.getArtist().contains(word)) {
                        theseTracks.add(track);
                    }
                }
            }
        }
        
        if (theseTracks.size()!=0) {
            int index = randomGenerator.nextInt(theseTracks.size());
            Track thisTrack = theseTracks.get(index);
            player.startPlaying(thisTrack.getFileName());
            return thisTrack;
        }
        
        
        return null;

    }


    /**
     * Enter all the known keywords and their associated responses
     * into our response map.
     */
    private void fillResponseMap()
    {
        //Regions (rappers)
        responseMap.put("west","The innovators. Who most caters to your taste?\n" +
        "2pac, Earl Sweatshirt, or Kendrick Lamar?");
        responseMap.put("east","Can't argue with the likes of Biggie, Nas, and Mos Def.\n" +
        "But if you had to choose...");
        responseMap.put("midwest","Serious talent out of the midwest, specifically Chicago.\n" +
        "Who's your favorite Chicago emcee out of Lupe Fiasco, Kanye West,\n" +
        "and Common?");
        
        //Genders (singers)
        responseMap.put("male","I see...who specifically do you enjoy listening to?");
        responseMap.put("female","You really can't go wrong with any of them. Who do you like?");
        
        //Singers
        responseMap.put("anthony","Very few voices are more soulful than his. He grew up\n" +
        "singing in church, an influence which manifests strongly\n" +
        "in his vocal cords.");
        responseMap.put("hamilton","Very few voices are more soulful than his. He grew up\n" +
        "singing in church, an influence which manifests strongly\n" +
        "in his vocal cords.");
        responseMap.put("usher","He sold out so hard, and I may never forgive him. Fortunately, his\n" +
        "older albums are amazing. 8701 and Confessions are both premium.");
        responseMap.put("d'angelo","Aside from his smooth vocals, very few people know how talented\n" +
        " he really is. He's produced many of his own tracks, including\n" +
        "'Brown Sugar' and 'I Found My Smile Again.'");
        responseMap.put("john","Get Lifted");
        responseMap.put("legend","Get Lifted");
        responseMap.put("lyfe","His vocal range is incredible, very few can rival his falsetto.\n" +
        "He's also a gifted storyteller, as demonstrated in 'Cry' and\n" +
        "'26 Years, 17 Days.'");
        
        responseMap.put("sza","She's on the same record label as Kendrick and Schoolboy Q, but with a more\n" + 
        "unique sound. She combines smooth R&B vocals with gritty hip-hop\n" + 
        "beats.");
        responseMap.put("kehlani","She has a very unique style to her music; tough, yet soulful. Direct and\n" +
        "in-your-face, yet smooth and melodic. She's extremely talented, and is\n" +
        "stil on the come-up.");
        responseMap.put("erykah","The timbre of her voice is like honey and cinnamon blended together\n" +
        "in butter and liquid molasses. Every single track on 'Baduizm'\n" +
        "is perfection.");
        responseMap.put("badu","The timbre of her voice is like honey and cinnamon blended together\n" +
        "in butter and liquid molasses. Every single track on 'Baduizm'\n" +
        "is perfection.");
        responseMap.put("lauryn","As both a rapper and a singer, she has numerous ways of pulling\n" +
        "you in. 'Doo Wop' and 'Ex-Factor' are two tracks in which she showcases\n" +
        "her versatility.");
        responseMap.put("hill","As both a rapper and a singer, she has numerous ways of pulling\n" +
        "you in. 'Doo Wop' and 'Ex-Factor' are two tracks in which she showcases\n" +
        "her versatility.");
        responseMap.put("aaliyah","She came out with a slew of classics in teh 90's; unfortunately, a\n" + 
        "plane crash would prematurely end her life. RIP to another legend.");
        
        
        //Rappers
        responseMap.put("2pac", "He is (arguably) the most influential rapper of all time\n" +
        "with songs like 'Keep Ya Head Up,' 'Only God Can Judge Me,' and 'Do For Love.'\n" +
        "May he rest in peace");
        responseMap.put("nas", "Some would say that 'Illmatic'  might be the greatest rap album in history.\n" + 
        "Either way, if you haven't already, listen to 'Project Windows,' '2nd Childhood,'\n" +
        "and 'You Can't Stop Us Now.'");
        responseMap.put("common", "He started out as a spoken word poet, which is evident in many of\n" +
        "his lines. 'So Far To Go' with D'Angelo and J Dilla happens to be in my top 3\n" +
        "favorite songs ever made.");
        responseMap.put("kanye", "Whatever happened to the Kanye from 2008 and earlier? Those days of\n" +
        "soulful hip-hop are long gone for him, but 'The College Dropout,' 'Late Registration,'\n" +
        "and 'Graduation' remain immaculate.");
        responseMap.put("biggie", "His unmistakable flow continues to captivate listeners even after his passing.\n" + 
        "While his discography is rather small, it's littered with amazing tracks\n" +
        "through and through. RIP to the BIG.");
        responseMap.put("outkast", "Andre 3000 and Big Boi are amazing rappers on their own, but they combine\n" +
        "to form hip-hop's greatest duo. 'Int'l Playa's Anthem' with UGK is a track\n" +
        "for the ages, along with anything from 'Aquemini.'");
        responseMap.put("kendrick", "He never ceases to amaze me. Drawing much influence from 2pac, his latest\n" +
        "album is nothing short of creative genius. 'GKMC' is an instant classic,\n" +
        "but check out' To Pimp A Butterfly' if you haven't already.");
        responseMap.put("lamar", "He never ceases to amaze me. Drawing much influence from 2pac, his latest\n" +
        "album is nothing short of creative genius. 'GKMC' is an instant classic,\n" +
        "but check out' To Pimp A Butterfly' if you haven't already.");
        responseMap.put("mos", "One of Brooklyn's finest emcees, no doubt. Him and Talib Kweli should \n" + 
        "retake the industry by storm if you ask me. Their collab album ('Black Star')\n" +
        "is an absolute masterpiece.");
        responseMap.put("def", "One of Brooklyn's finest emcees, no doubt. Him and Talib Kweli should \n" + 
        "retake the industry by storm if you ask me. Their collab album ('Black Star')\n" +
        "is an absolute masterpiece.");
        responseMap.put("earl", "He just might be the most talented lyricist in Odd Future...his wordplay\n" + 
        "and complex rhyme schemes will leave you breathless. 'Earl' was his debut album,\n" + 
        "released when he was only 16.");
        responseMap.put("sweatshirt", "He just might be the most talented lyricist in Odd Future...his wordplay\n" + 
        "and complex rhyme schemes will leave you breathless. 'Earl' was his debut album,\n" + 
        "released when he was only 16.");
        responseMap.put("lupe", "'Food & Liquor' was such a masterpiece. He fell off pretty hard after\n" +
        "'The Cool,' but his latest album, 'Tetsuo & Youth,' is a revival...quite possibly\n" + 
        "the album of his career.");
        responseMap.put("fiasco", "'Food & Liquor' was such a masterpiece. He fell off pretty hard after\n" +
        "'The Cool,' but his latest album, 'Tetsuo & Youth,' is a revival...quite possibly\n" + 
        "the album of his career.");
        responseMap.put("bye","" + getGoodbye() + "");
    }

    
    /**
     * Build up a list of default responses from which we can pick one
     * if we don't know what else to say.
     */
    private void fillDefaultResponses()
    {
        defaultResponses.add("I don't know much about that...must not be that great.");
        defaultResponses.add("Mmmmmm nope. You lost me. Try again.");
        defaultResponses.add("That sounds interesting, tell me more! Please don't though.");
        defaultResponses.add("I may need a bit more information on that.");
        defaultResponses.add("So this may be surprising, but I'm actually a computer program...\n" + 
        "As such, your response didn't make sense to me.");
        defaultResponses.add("That is explained in the manual. Have you read the manual?");
        defaultResponses.add("Sorry, but I only talk about GOOD music. Try again.");
        defaultResponses.add("I unfortunately don't know much about that...can't win\n" +
        "'em all, I guess.");
        defaultResponses.add("Could you elaborate on that?");
    }
    
    
    /**
     * Randomly select and return one of the default responses.
     * @return     A random default response
     */
    private String pickDefaultResponse()
    {
        // Pick a random number for the index in the default response list.
        // The number will be between 0 (inclusive) and the size of the list (exclusive).
        int index = randomGenerator.nextInt(defaultResponses.size());
        return defaultResponses.get(index);
    }
    
            
    /**
     * Stores the introductory sentence when Jabber is started
     * 
     * @return A String that introduces the program
     */
    public String getWelcome() 
    {
        return "You are now speaking with the almighty Hands of Zeus, aka\n" +
        "Thor Molecules, aka Cosmic Specialist the ethereal, aka\n" +
        "Galaxy Knuckles, aka the illustrious Wicked Swami, vizier of the vibes.\n" +
        "You can start by telling me your name?";
    }
    
    /**
     * Stores the 
     */
    public String getGoodbye()
    {
        return "Deuces, " + name + ", follow me on SoundCloud @Wicked Swami";
    }
    
    /**
     * If the user enters this word, the program terminates
     * 
     * @return The magic word entered by the user that ends the program
     */
    public String getEndingString()
    {
        return "bye";
    }
    

    /**
     * Add a track file to the collection.
     * @param filename The file name of the track to be added.
     */
    public void addFile(String filename)
    {
        tracks.add(new Track(filename));
    }
    
    /**
     * Add a track to the collection.
     * @param track The track to be added.
     */
    public void addTrack(Track track)
    {
        tracks.add(track);
    }
    
    /**
     * Play a track in the collection.
     * @param index The index of the track to be played.
     */
    public void playTrack(int index)
    {
        
        Track track = tracks.get(index);
        player.startPlaying(track.getArtist());
        System.out.println(track.getArtist()+"\n"+track.getTitle()+track.getAlbum());
        
    }
    
    
    
    /**
     * Show a list of all the tracks in the collection.
     */
    public void listAllTracks()
    {
        System.out.println("Track listing: ");

        for(Track track : tracks) {
            System.out.println(track.getDetails());
        }
        System.out.println();
    }
    
    /**
     * List all tracks by the given artist.
     * @param artist The artist's name.
     */
    public void listByArtist(String artist)
    {
        for(Track track : tracks) {
            if(track.getArtist().contains(artist)) {
                System.out.println(track.getDetails());
            }
        }
    }
    
    
    /**
     * Stop the player.
     */
    public void stopPlaying()
    {
        player.stop();
    }
    
    /**
     * Retrieves mp3 files to be added to the initial collection
     * 
     * @param The name of the folder from which to add the files
     */
    private void readLibrary(String folderName)
    {
        ArrayList<Track> tempTracks = reader.readTracks(folderName, ".mp3");

        // Put all thetracks into the organizer.
        for(Track track : tempTracks) {
            addTrack(track);
        }
    }
}
